# Check Git Status

private_lane :check_git_status do |options|
  ensure_git_status_clean
  git_pull
end

private_lane :parse_package_json do |options|
  pjson = load_json(json_path: "package.json")
  versionString = pjson["version"]
  version = versionString.split('.')
  versionCode = format('%d%02d%3d', version[0], version[1], version[2])
  ENV["IOS_VERSION"] = versionString
  ENV["ANDROID_VERSION_NAME"] = versionString
  ENV["IOS_VERSION_BUILD_NUMBER"] = versionCode
  ENV["ANDROID_VERSION_CODE"] = versionCode
end

before_all do |lane, options|
  check_git_status
  parse_package_json
end

# IOS

platform :ios do
  error do |lane, exception, options|
    path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    if File.exist?("../#{path}.back")
      restore_file(path: path)
    end
  end

  lane :setup do |options|
    produce(
      app_name: ENV['IOS_APP_NAME'],
      app_identifier: ENV['IOS_APP_IDENTIFIER'],
      skip_itc: true
    )
    match(
      type: 'adhoc',
      shallow_clone: true,
      clone_branch_directly: true,
      force_for_new_devices: true
    )
  end

  lane :setup_push do
    pem
  end

  lane :build do |options|
    plist_full_path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    backup_file(path: plist_full_path)
    xcodeproj = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcodeproj"
    xcworkspace = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcworkspace"
    update_info_plist(
      xcodeproj: xcodeproj,
      plist_path: ENV['IOS_PLIST_PATH'],
      block: lambda { |plist|
        plist['CFBundleIdentifier'] = ENV['IOS_APP_IDENTIFIER']
        plist['CFBundleName'] = ENV['IOS_APP_NAME']
        plist['CFBundleDisplayName'] = ENV['IOS_APP_DISPLAY_NAME']
        plist['CFBundleShortVersionString'] = ENV['IOS_VERSION']
        plist['CFBundleVersion'] = ENV['IOS_VERSION_BUILD_NUMBER']
      },
    )
    gym(
        workspace: xcworkspace,
        scheme: ENV['IOS_PROJECT_NAME'],
        output_directory: ENV['IOS_PROJECT_PATH']
    )
    restore_file(path: plist_full_path)
  end

  lane :appcenter do |options|
    match(
      type: 'adhoc',
      shallow_clone: true,
      clone_branch_directly: true,
      readonly: true
    )
    build
    appcenter_upload(
        app_name: ENV['APPCENTER_APP_NAME_IOS'],
        ipa: "#{lane_context[SharedValues::IPA_OUTPUT_PATH]}",
        dsym: "#{lane_context[SharedValues::DSYM_OUTPUT_PATH]}"
    )
  end

  lane :beta do |options|
    match(
      type: 'appstore',
      shallow_clone: true,
      clone_branch_directly: true,
      readonly: true
    )
    build
    pilot
    appcenter_upload(
        app_name: ENV['APPCENTER_APP_NAME_IOS'],
        upload_dsym_only: true,
        dsym: "#{lane_context[SharedValues::DSYM_OUTPUT_PATH]}"
    )
  end

end

#  ANDROID

platform :android do
  lane :build do |options|
    gradle(
      task: "assemble",
      build_type: ENV['GRADLE_BUILD_TYPE'],
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
  end

  lane :alpha do |options|
    build
    appcenter_upload(
      app_name: ENV['APPCENTER_APP_NAME_ANDROID'],
      apk: "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    )
  end

  lane :beta do |options|
    build
    upload_to_play_store(
        track: 'beta',
        apk: "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    )
  end

end
