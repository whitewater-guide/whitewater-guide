fastlane_require 'json'
fastlane_require 'spaceship'

skip_docs

# Check Git Status
private_lane :check_git_status do
  if ENV["ENV"] == "production"
    ensure_git_status_clean
    ensure_git_branch(
      branch: ENV["BRANCH"]
    )
  end
end

private_lane :parse_package_json do
  packageJsonFile = File.read("../package.json")
  packageJson = JSON.parse(packageJsonFile)
  version = packageJson["version"]

  appJsonFile = File.read("../app.json")
  appJson = JSON.parse(appJsonFile)

  ENV["IOS_VERSION"] = version
  ENV["ANDROID_VERSION_NAME"] = version
  ENV["IOS_BUILD_NUMBER"] = appJson["iosBuildNumber"].to_s
  ENV["ANDROID_VERSION_CODE"] = appJson["androidBuildNumber"].to_s
end

before_all do |lane, options|
  yarn(
    command: "rnuc .env.#{ENV['ENV']}.yml",
    package_path: "package.json"
  )
  parse_package_json
end

after_all do |lane, options|
  yarn(
    command: "setup-dev-env",
    package_path: "package.json"
  )
end

# IOS

platform :ios do
  lane :check_live_version do
    liveVersion = app_store_build_number(
      app_identifier: ENV["IOS_APP_IDENTIFIER"],
      username: ENV["IOS_USER_ID"]
    )
    if liveVersion.to_s == ENV["IOS_BUILD_NUMBER"]
      UI.user_error!("Current iOS version (#{ENV['IOS_VERSION']}) is same as #{liveVersion}. You must bump package.json version")
    end
  end

  error do |lane, exception, options|
    path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    if File.exist?("../#{path}.back")
      restore_file(path: path)
    end
  end

  lane :prepare do |options|
    # run nuke then run this
    match(
      type: 'development',
      shallow_clone: true,
      clone_branch_directly: true,
      force_for_new_devices: true,
      force: true,
    )
    match(
      type: 'appstore',
      shallow_clone: true,
      clone_branch_directly: true,
      force_for_new_devices: true,
      force: true,
    )
  end

  lane :setup_push do |options|
    if options[:development]
      pem(
        output_path: "#{ENV['IOS_PROJECT_PATH']}/pem/dev",
        development: true
      )
    else
      pem(
        output_path: "#{ENV['IOS_PROJECT_PATH']}/pem",
      )
    end
  end

  lane :build do |options|
    check_git_status
    check_live_version
    xcworkspace = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcworkspace"
    gym(
      workspace: xcworkspace,
      configuration: options[:configuration],
      scheme: ENV['IOS_PROJECT_NAME'],
      output_directory: ENV['IOS_PROJECT_PATH']
    )
  end

  lane :bump do |options|
    appJsonFile = File.read("../app.json")
    appJson = JSON.parse(appJsonFile)
    appJson["iosBuildNumber"] = appJson["iosBuildNumber"] + 1
    ENV["IOS_BUILD_NUMBER"] = appJson["iosBuildNumber"].to_s
    File.open("../app.json", "w") do |f|
      f.write(JSON.pretty_generate(appJson) + "\n")
    end

    ios_set_version(
      version: ENV["IOS_VERSION"],
      xcodeproj: "#{ENV['IOS_PROJECT_PATH']}/whitewater.xcodeproj",
    )
    ios_set_build_number(
      build_number: ENV["IOS_BUILD_NUMBER"],
      xcodeproj: "#{ENV['IOS_PROJECT_PATH']}/whitewater.xcodeproj",
    )
    git_add
    unless options[:skipCommit]
      conf = options[:configuration]
      git_commit(
        path: "*",
        message: "chore(mobile): iOS #{conf} #{ENV['IOS_VERSION']}@#{ENV['IOS_BUILD_NUMBER']}",
      )
    end
  end

  lane :staging do |options|
    match(
      type: 'appstore',
      shallow_clone: true,
      clone_branch_directly: true,
      readonly: true
    )
    unless options[:skipBuild]
      bump(configuration: 'staging')
      build(
        configuration: 'Staging'
      )
    end
    pilot(
      ipa: ENV['IOS_IPA_PATH'],
      skip_submission: true,
      skip_waiting_for_build_processing: true,
    )
  end

  lane :production do |options|
    match(
      type: 'appstore',
      shallow_clone: true,
      clone_branch_directly: true,
      readonly: true
    )
    bump(configuration: 'release')
    unless options[:skipBuild]
      build(
        configuration: 'Release'
      )
    end
    pilot(
      ipa: ENV['IOS_IPA_PATH'],
      skip_submission: true,
      skip_waiting_for_build_processing: true,
    )
  end

end

#  ANDROID

platform :android do
  lane :build do |options|
    check_git_status
    gradle(
      task: ENV['GRADLE_BUILD_TASK'],
      build_type: ENV['GRADLE_BUILD_TYPE'],
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
  end

  lane :bump do |options|
    appJsonFile = File.read("../app.json")
    appJson = JSON.parse(appJsonFile)
    appJson["androidBuildNumber"] = appJson["androidBuildNumber"] + 1
    ENV["ANDROID_VERSION_CODE"] = appJson["androidBuildNumber"].to_s
    File.open("../app.json", "w") do |f|
      f.write(JSON.pretty_generate(appJson) + "\n")
    end

    android_set_version_code(
      gradle_file: "#{ENV['ANDROID_PROJECT_DIR']}/app/build.gradle",
      version_code: ENV["ANDROID_VERSION_CODE"],
    )
    android_set_version_name(
      gradle_file: "#{ENV['ANDROID_PROJECT_DIR']}/app/build.gradle",
      version_name: ENV["ANDROID_VERSION_NAME"],
    )
    git_add
    unless options[:skipCommit]
      git_commit(
        path: "*",
        message: "chore(mobile): android staging #{ENV['ANDROID_VERSION_NAME']}@#{ENV['ANDROID_VERSION_CODE']}",
      )
    end
  end

  lane :staging do |options|
    unless options[:skipBuild]
      build
    end
    # TODO: use minio
    aws_s3(
      aws_profile: 'default',
      bucket: ENV['S3_BUCKET'],
      region: ENV['S3_REGION'],
      apk: ENV['ANDROID_APK_PATH'],
      app_directory: 'android',
      # path: 'v{CFBundleShortVersionString}_b{CFBundleVersion}/', # This is actually the default.
      upload_metadata: true,
      version_file_name: '../app.json',
    )
  end

  lane :production do |options|
    build
    upload_to_play_store(
      package_name: ENV['ANDROID_PACKAGE_NAME'],
      track: 'production',
      skip_upload_apk: true,
      aab: ENV['ANDROID_AAB_PATH'],
    )
  end

end
