# Check Git Status

private_lane :check_git_status do |options|
  ensure_git_status_clean
end

private_lane :parse_package_json do |options|
  pjson = load_json(json_path: "package.json")
  version = pjson["version"]
  major, minor, patchAndBuild = version.split('.')
  patch, buildNumber = "#{patchAndBuild}-0".split('-')
  versionCode = format('%d%03d%03d%02d', major, minor, patch, buildNumber)
  versionName = format('%d.%d.%d', major, minor, patch)
  ENV["IOS_VERSION"] = versionName
  ENV["ANDROID_VERSION_NAME"] = versionName
  ENV["IOS_VERSION_BUILD_NUMBER"] = buildNumber
  ENV["ANDROID_VERSION_CODE"] = versionCode
end

before_all do |lane, options|
  check_git_status
  parse_package_json
end

# IOS

platform :ios do
  error do |lane, exception, options|
    path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    if File.exist?("../#{path}.back")
      restore_file(path: path)
    end
  end

  lane :setup do |options|
    produce(
      app_name: ENV['IOS_APP_NAME'],
      app_identifier: ENV['IOS_APP_IDENTIFIER'],
      skip_itc: true
    )
    match(
      type: 'adhoc',
      shallow_clone: true,
      clone_branch_directly: true,
      force_for_new_devices: true
    )
  end

  lane :setup_push do |options|
    if options[:development]
      pem(
          output_path: "#{ENV['IOS_PROJECT_PATH']}/pem/dev",
          development: true
      )
    else
      pem(
        output_path: "#{ENV['IOS_PROJECT_PATH']}/pem",
      )
    end
  end

  lane :build do |options|
    plist_full_path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    backup_file(path: plist_full_path)
    xcodeproj = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcodeproj"
    xcworkspace = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcworkspace"
    update_info_plist(
      xcodeproj: xcodeproj,
      plist_path: ENV['IOS_PLIST_PATH'],
      block: lambda { |plist|
        plist['CFBundleIdentifier'] = ENV['IOS_APP_IDENTIFIER']
        plist['CFBundleName'] = ENV['IOS_APP_NAME']
        plist['CFBundleDisplayName'] = ENV['IOS_APP_DISPLAY_NAME']
        plist['CFBundleShortVersionString'] = ENV['IOS_VERSION']
        plist['CFBundleVersion'] = ENV['IOS_VERSION_BUILD_NUMBER']
      },
    )
    gym(
        workspace: xcworkspace,
        configuration: options[:configuration],
        scheme: ENV['IOS_PROJECT_NAME'],
        output_directory: ENV['IOS_PROJECT_PATH']
    )
    restore_file(path: plist_full_path)
  end

  lane :code_push do |options|
    sh("yarn", "run", "appcenter", "codepush", "release-react",
       "-a", "#{ENV['APPCENTER_OWNER_NAME']}/#{ENV['APPCENTER_APP_NAME_IOS']}",
       "-t", ENV['IOS_VERSION'],
       "-d", ENV['CODEPUSH_DEPLOYMENT'],
       "--token", ENV['APPCENTER_API_TOKEN'],
     )
  end

  private_lane :crashlytics do |options|
    puts "Upload dsyms: #{lane_context[SharedValues::DSYM_OUTPUT_PATH]}"
    upload_symbols_to_crashlytics(
        dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH],
        gsp_path: ENV['IOS_GSP_PATH'],
        binary_path: "#{ENV['IOS_PROJECT_PATH']}/Pods/Fabric/upload-symbols"
    )
  end

  lane :staging do |options|
    match(
      type: 'appstore',
      shallow_clone: true,
      clone_branch_directly: true,
      readonly: true
    )
    unless options[:skipBuild]
      build(
        configuration: 'Staging'
      )
    end
    pilot(
      ipa: ENV['IOS_IPA_PATH'],
      skip_waiting_for_build_processing: true,
    )
    crashlytics
    code_push
  end

  lane :production do |options|
    match(
      type: 'appstore',
      shallow_clone: true,
      clone_branch_directly: true,
      readonly: true
    )
    unless options[:skipBuild]
      build(
        configuration: 'Release'
      )
    end
    deliver(
      ipa: ENV['IOS_IPA_PATH'],
      submit_for_review: false,
      skip_screenshots: true,
      skip_metadata: true,
    )
    crashlytics
    code_push
  end

end

#  ANDROID

platform :android do
  lane :build do |options|
    gradle(
      task: "assemble",
      build_type: ENV['GRADLE_BUILD_TYPE'],
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
  end

  lane :code_push do |options|
    sh(
       "yarn", "run", "appcenter", "codepush", "release-react",
       "-a", "#{ENV['APPCENTER_OWNER_NAME']}/#{ENV['APPCENTER_APP_NAME_ANDROID']}",
       "-t", ENV['ANDROID_VERSION_NAME'],
       "-d", ENV['CODEPUSH_DEPLOYMENT'],
       "--token", ENV['APPCENTER_API_TOKEN'],
     )
  end

  lane :staging do |options|
    ENV['ENVFILE'] = '.env.staging' # for some reason react-native-config isn't picked from gradle
    build
    upload_to_play_store(
      package_name: ENV['ANDROID_PACKAGE_NAME'],
      track: 'production',
      apk: "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    )
    code_push
  end

  lane :production do |options|
    ENV['ENVFILE'] = '.env.production' # for some reason react-native-config isn't picked from gradle
    build
    upload_to_play_store(
      package_name: ENV['ANDROID_PACKAGE_NAME'],
      track: 'production',
      apk: "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    )
    code_push
  end

end
