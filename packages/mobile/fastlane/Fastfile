fastlane_require 'dotenv'

# Check Git Status

lane :check_git_status do |options|
  ensure_git_branch(
    branch: "#{options[:name]}"
  )
  ensure_git_status_clean
  git_pull

end

before_all do |lane, options|
  Dotenv.load(".env.#{ENV['ENV']}")
end

# IOS

platform :ios do
  error do |lane, exception, options|
    path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    if File.exist?("../#{path}.back")
      restore_file(path: path)
    end
  end

  lane :setup do |options|
    produce(
      app_name: ENV['IOS_APP_NAME'],
      skip_itc: true
    )
    match(
      type: 'development',
      shallow_clone: true,
      clone_branch_directly: true,
      force_for_new_devices: true
    )
    match(
      shallow_clone: true,
      clone_branch_directly: true,
      force_for_new_devices: true
    )
  end

  lane :setup_push do
    pem
  end

  lane :build do |options|
    plist_full_path = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PLIST_PATH']}"
    set_js_env
    backup_file(path: plist_full_path)
    xcodeproj = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcodeproj"
    xcworkspace = "#{ENV['IOS_PROJECT_PATH']}/#{ENV['IOS_PROJECT_NAME']}.xcworkspace"
    update_info_plist(
      xcodeproj: xcodeproj,
      plist_path: ENV['IOS_PLIST_PATH'],
      block: lambda { |plist|
        plist['CFBundleIdentifier'] = ENV['IOS_APP_ID']
        plist['CFBundleName'] = ENV['IOS_APP_NAME']
        plist['CFBundleDisplayName'] = ENV['IOS_APP_NAME']
        plist['CFBundleShortVersionString'] = ENV['IOS_VERSION']
        plist['CFBundleVersion'] = ENV['IOS_VERSION_BUILD_NUMBER']
      },
    )
    profile_env_name = "sigh_#{ENV['IOS_APP_ID']}_#{ENV['MATCH_TYPE']}_profile-name"
    gymOptions = ({
      silent: true,
      xcargs: "PROVISIONING_PROFILE_SPECIFIER='#{ENV[profile_env_name]}' DEVELOPMENT_TEAM='#{ENV['IOS_TEAM_ID']}'"
    }).merge(
      File.directory?("../#{xcworkspace}") ?
        {workspace: xcworkspace} :
        {project: xcodeproj}
    )
    gym(gymOptions)
    restore_file(path: plist_full_path)
  end

  lane :deploy_hockey do |options|
    hockey(
      notify: '0',
      ipa: ENV['IOS_IPA_PATH']
    )
  end

  lane :deploy_appCenter do |options|
    appcenter_upload(
      api_token: ENV['FL_APPCENTER_API_TOKEN'],
      owner_name: ENV['APPCENTER_USERNAME'],
      app_name: ENV['IOS_APP_NAME'],
      ipa: ENV['IOS_IPA_PATH']
    )
  end

  lane :deploy do |options|
    match(
      shallow_clone: true,
      clone_branch_directly: true,
      readonly: true
    )
    build
    if ENV['DEPLOYMENT_PLATFORM'] === 'hockeyapp' then
      deploy_hockey
    elsif ENV['DEPLOYMENT_PLATFORM'] === 'appcenter' then
      deploy_appCenter
    else
      pilot(
        distribute_external: false,
        skip_waiting_for_build_processing: true
      )
    end
  end

  lane :deploy_local do |options|
    check_git_status(name: ENV['REPO_GIT_BRANCH'])
    deploy
  end
end

#  ANDROID

platform :android do
  lane :build do |options|
    set_js_env
    gradle(
      task: "assembleRelease",
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
  end

  lane :deploy_hockey do |options|
    hockey(
      notify: '0',
      apk: ENV['ANDROID_APK_PATH']
    )
  end

  lane :deploy_appCenter do |options|
    appcenter_upload(
      api_token: ENV['FL_APPCENTER_API_TOKEN'],
      owner_name: ENV['APPCENTER_USERNAME'],
      app_name: ENV['GRADLE_APP_NAME'],
      apk: ENV['ANDROID_APK_PATH']
    )
  end

  lane :deploy do |options|
    build
    if ENV['DEPLOYMENT_PLATFORM'] === 'hockeyapp' then
      deploy_hockey
    elsif ENV['DEPLOYMENT_PLATFORM'] === 'appcenter' then
      deploy_appCenter
    end
  end

  lane :deploy_local do |options|
    check_git_status(name: ENV['REPO_GIT_BRANCH'])
    deploy
  end
end
