apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

project.ext.vectoricons = [
    iconFontsDir: "../../../../node_modules/react-native-vector-icons/Fonts",
    iconFontNames: [ 'MaterialCommunityIcons.ttf', 'MaterialIcons.ttf' ]
]
apply from: "../../../../node_modules/react-native-vector-icons/fonts.gradle"
apply plugin: 'com.getkeepsafe.dexcount'

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */

react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    reactNativeDir = file("../../../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    codegenDir = file("../../../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    cliFile = file("../../../../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../index.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    hermesCommand = "../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

project.ext.sentryCli = [
    logLevel: "debug",
    sentryProperties: "../sentry.properties"
]

apply from: "../../../../node_modules/react-native-ultimate-config/android/rnuc.gradle"
apply from: "../../../../node_modules/@sentry/react-native/sentry.gradle"

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "guide.whitewater"
    defaultConfig {
        applicationId "guide.whitewater"
        resValue "string", "build_config_package", "guide.whitewater"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1817096200
        versionName "1.21.1"
        // react-native-iap: we only use the Google Play flavor
        missingDimensionStrategy 'store', 'play'
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(String.valueOf(System.getenv("GRADLE_KEYSTORE")))
            storePassword System.getenv("GRADLE_KEYSTORE_PASSWORD")
            keyAlias System.getenv("GRADLE_KEYSTORE_ALIAS")
            keyPassword System.getenv("GRADLE_KEYSTORE_ALIAS_PASSWORD")
        }
    }
    buildTypes {
        debug {
            resValue "string", "app_name", "WW DEBUG"
            applicationIdSuffix ".staging"
        }
        release {
            resValue "string", "app_name", "whitewater.guide"
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
        releaseStaging {
            initWith release
            applicationIdSuffix ".staging"
            resValue "string", "app_name", "WW STAGING"
            matchingFallbacks = ['release']
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    // Required by react-native-bootsplash: https://github.com/zoontek/react-native-bootsplash/blob/master/MIGRATION.md
    implementation "androidx.core:core-splashscreen:1.0.0"
    // maybe this can help with location not being updated when offline
    // https://docs.mapbox.com/android/maps/guides/user-location/#location-provider
    implementation("com.google.android.gms:play-services-location:21.0.1")
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    // Required by react-navigation
    implementation("androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}")
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:${rootProject.ext.swiperefreshlayoutVersion}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'
