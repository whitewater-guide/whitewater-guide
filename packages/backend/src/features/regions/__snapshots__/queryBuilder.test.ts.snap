// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`details should build correct query with gauges connection 1`] = `
with gauges_connection as (
    select
        gauges_view.id,
        gauges_view.name,
        gauges_view.source_id
    from
        gauges_view
    where
        gauges_view.language = 'en'
    order by
        gauges_view.name asc,
        gauges_view.created_at asc,
        gauges_view.id asc
)
select
    regions_view.id,
    regions_view.name,
    regions_view.description,
    regions_view.season,
    regions_view.season_numeric,
    regions_view.bounds,
    regions_view.pois,
    regions_view.hidden,
    regions_view.created_at,
    regions_view.updated_at, (with gauges_connection_internal as (
            select
                gauges_connection.*,
                COALESCE(count(gauges_connection.*)
                    OVER (),
                    0)
            from
                gauges_connection
            inner join sources_regions on gauges_connection.source_id = sources_regions.source_id
            where
                sources_regions.region_id = regions_view.id
)
        select
            json_build_object('count', (
                    select
                        gauges_connection_internal.count from gauges_connection_internal
                    limit 1),
                'nodes', (
                    select
                        COALESCE(json_agg (gauges_connection_internal.*),
                            '[]'::json)
                    from
                        gauges_connection_internal))) as gauges
from
    regions_view
where
    regions_view.language = 'en'
order by
    regions_view.name asc,
    regions_view.created_at asc,
    regions_view.id asc

`;

exports[`details should build correct query with rivers connection 1`] = `
with rivers_connection as (
    select
        rivers_view.id,
        rivers_view.name,
        rivers_view.region_id
    from
        rivers_view
    where
        rivers_view.language = 'en'
    order by
        rivers_view.name asc,
        rivers_view.created_at asc,
        rivers_view.id asc
)
select
    regions_view.id,
    regions_view.name,
    regions_view.description,
    regions_view.season,
    regions_view.season_numeric,
    regions_view.bounds,
    regions_view.pois,
    regions_view.hidden,
    regions_view.created_at,
    regions_view.updated_at, (with rivers_connection_internal as (
            select
                rivers_connection.*,
                COALESCE(count(rivers_connection.*)
                    OVER (),
                    0)
            from
                rivers_connection
            where
                rivers_connection.region_id = regions_view.id
)
        select
            json_build_object('count', (
                    select
                        rivers_connection_internal.count from rivers_connection_internal
                    limit 1),
                'nodes', (
                    select
                        COALESCE(json_agg (rivers_connection_internal.*),
                            '[]'::json)
                    from
                        rivers_connection_internal))) as rivers
from
    regions_view
where
    regions_view.language = 'en'
order by
    regions_view.name asc,
    regions_view.created_at asc,
    regions_view.id asc

`;

exports[`details should build correct query with sections connection 1`] = `
with sections_connection as (
    select
        sections_view.id,
        sections_view.name,
        sections_view.river_id
    from
        sections_view
    where
        sections_view.language = 'en'
    order by
        sections_view.name asc,
        sections_view.created_at asc,
        sections_view.id asc
)
select
    regions_view.id,
    regions_view.name,
    regions_view.description,
    regions_view.season,
    regions_view.season_numeric,
    regions_view.bounds,
    regions_view.pois,
    regions_view.hidden,
    regions_view.created_at,
    regions_view.updated_at, (with sections_connection_internal as (
            select
                sections_connection.*,
                COALESCE(count(sections_connection.*)
                    OVER (),
                    0)
            from
                sections_connection
            inner join rivers on sections_connection.river_id = rivers.id
            where
                rivers.region_id = regions_view.id
)
        select
            json_build_object('count', (
                    select
                        sections_connection_internal.count from sections_connection_internal
                    limit 1),
                'nodes', (
                    select
                        COALESCE(json_agg (sections_connection_internal.*),
                            '[]'::json)
                    from
                        sections_connection_internal))) as sections
from
    regions_view
where
    regions_view.language = 'en'
order by
    regions_view.name asc,
    regions_view.created_at asc,
    regions_view.id asc

`;

exports[`details should build correct query without connections 1`] = `
select
    regions_view.id,
    regions_view.name,
    regions_view.description,
    regions_view.season,
    regions_view.season_numeric,
    regions_view.bounds,
    regions_view.pois,
    regions_view.hidden,
    regions_view.created_at,
    regions_view.updated_at
from
    regions_view
where
    regions_view.language = 'en'
order by
    regions_view.name asc,
    regions_view.created_at asc,
    regions_view.id asc

`;

exports[`list should build correct query with gauges connection 1`] = `
with gauges_connection as (
    select
        gauges_view.id,
        gauges_view.source_id
    from
        gauges_view
    where
        gauges_view.language = 'en'
    order by
        gauges_view.name asc,
        gauges_view.created_at asc,
        gauges_view.id asc
)
select
    regions_view.id,
    regions_view.name,
    regions_view.description,
    regions_view.season,
    regions_view.season_numeric,
    regions_view.bounds,
    regions_view.pois,
    regions_view.hidden,
    regions_view.created_at,
    regions_view.updated_at, (with gauges_connection_internal as (
            select
                gauges_connection.*,
                COALESCE(count(gauges_connection.*)
                    OVER (),
                    0)
            from
                gauges_connection
            inner join sources_regions on gauges_connection.source_id = sources_regions.source_id
            where
                sources_regions.region_id = regions_view.id
)
        select
            json_build_object('count', (
                    select
                        gauges_connection_internal.count from gauges_connection_internal
                    limit 1))) as gauges,
count(regions_view.*)
OVER ()
from
    regions_view
where
    regions_view.language = 'en'
order by
    regions_view.name asc,
    regions_view.created_at asc,
    regions_view.id asc

`;

exports[`list should build correct query with rivers connection 1`] = `
with rivers_connection as (
    select
        rivers_view.id,
        rivers_view.region_id
    from
        rivers_view
    where
        rivers_view.language = 'en'
    order by
        rivers_view.name asc,
        rivers_view.created_at asc,
        rivers_view.id asc
)
select
    regions_view.id,
    regions_view.name,
    regions_view.description,
    regions_view.season,
    regions_view.season_numeric,
    regions_view.bounds,
    regions_view.pois,
    regions_view.hidden,
    regions_view.created_at,
    regions_view.updated_at, (with rivers_connection_internal as (
            select
                rivers_connection.*,
                COALESCE(count(rivers_connection.*)
                    OVER (),
                    0)
            from
                rivers_connection
            where
                rivers_connection.region_id = regions_view.id
)
        select
            json_build_object('count', (
                    select
                        rivers_connection_internal.count from rivers_connection_internal
                    limit 1))) as rivers,
count(regions_view.*)
OVER ()
from
    regions_view
where
    regions_view.language = 'en'
order by
    regions_view.name asc,
    regions_view.created_at asc,
    regions_view.id asc

`;

exports[`list should build correct query with sections connection 1`] = `
with sections_connection as (
    select
        sections_view.id,
        sections_view.river_id
    from
        sections_view
    where
        sections_view.language = 'en'
    order by
        sections_view.name asc,
        sections_view.created_at asc,
        sections_view.id asc
)
select
    regions_view.id,
    regions_view.name,
    regions_view.description,
    regions_view.season,
    regions_view.season_numeric,
    regions_view.bounds,
    regions_view.pois,
    regions_view.hidden,
    regions_view.created_at,
    regions_view.updated_at, (with sections_connection_internal as (
            select
                sections_connection.*,
                COALESCE(count(sections_connection.*)
                    OVER (),
                    0)
            from
                sections_connection
            inner join rivers on sections_connection.river_id = rivers.id
            where
                rivers.region_id = regions_view.id
)
        select
            json_build_object('count', (
                    select
                        sections_connection_internal.count from sections_connection_internal
                    limit 1))) as sections,
count(regions_view.*)
OVER ()
from
    regions_view
where
    regions_view.language = 'en'
order by
    regions_view.name asc,
    regions_view.created_at asc,
    regions_view.id asc

`;

exports[`list should build correct query without connections 1`] = `
select
    regions_view.id,
    regions_view.name,
    regions_view.description,
    regions_view.season,
    regions_view.season_numeric,
    regions_view.bounds,
    regions_view.pois,
    regions_view.hidden,
    regions_view.created_at,
    regions_view.updated_at,
    count(regions_view.*)
    OVER ()
from
    regions_view
where
    regions_view.language = 'en'
order by
    regions_view.name asc,
    regions_view.created_at asc,
    regions_view.id asc

`;
