type Region {
  id: ID!
  name: String!
  description: String
  season: String
  seasonNumeric: [Int]!
  bounds: [[Float!]]
  pois: [Point]!
  hidden: Boolean
  createdAt: Date
  updatedAt: Date
  rivers: RegionRiverConnection!
  gauges: RegionGaugeConnection!
  # sources: [Source]!

  # Pagination not supported yet, so use only for count!
  sections: RegionSectionConnection!
}

type RegionRiverConnection {
  nodes: [River]!
  count: Int!
}

type RegionGaugeConnection {
  nodes: [Gauge]!
  count: Int!
}

type RegionSectionConnection {
  nodes: [Section]!
  count: Int!
}

input RegionInput {
  id: ID
  name: String!
  description: String
  season: String
  seasonNumeric: [Int]
  pois: [PointInput]
  bounds: [[Float!]]
  hidden: Boolean
}

type RegionsList {
  nodes: [Region]!
  count: Int!
}

type Query {
  regions(page: Page): RegionsList!
  region(id: ID): Region
}

type Mutation {
  upsertRegion(region: RegionInput!): Region
  removeRegion(id: ID!): ID
}