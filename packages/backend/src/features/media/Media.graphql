enum MediaKind {
  photo
  video
  blog
}

type Media {
  # Unique ID
  id: ID!
  # Photo, video or blog
  kind: MediaKind!
  # Human-friendly description
  description: String
  # Copyright
  copyright: String
  # Full URL for videos and blogs,
  # For images, use image instead
  url: String!
  # Absolute image url (or thumb, when parameters are set)
  image(width: Int, height: Int): String
  # Mandatory for images - [width, height] array. Makes no sense for blogs and videos (yet)
  resolution: [Int]
  # Image size in bytes. Null for blogs and videos
  size: Int
  # weight for sorting
  weight: Int
  # Not persistent. Indicates that client should not display this item in lists
  deleted: Boolean
  createdAt: Date
  updatedAt: Date
}

input MediaInput {
  id: ID
  kind: MediaKind!
  description: String
  copyright: String
  # Full URL for videos and blogs, filename for uploaded images
  url: String
  resolution: [Int]
  weight: Int
}

type MediaList {
  nodes: [Media]!
  count: Int!
}

type Query {
  mediaBySection(sectionId: ID!, page: Page): MediaList!
  media(id: ID): Media
}

type Mutation {
  upsertSectionMedia(sectionId: ID!, media: MediaInput!): Media
  removeMedia(id: ID!): Media
}
