type GaugeBinding {
  "Below this level the river is not enjoyable to paddle"
  minimum: Float
  "The river is still runnable above this level, but difficulty is considerably higher than mentioned here"
  maximum: Float
  "The best level for paddlers who consider themselves to be in the same class as the section"
  optimum: Float
  "It is insanely dangerous or physically impossible to run river this high"
  impossible: Float
  "If true, then the gauge gives very vague idea of actual section flows (e.g. the gauge is on other tributary)"
  approximate: Boolean
  "Optional formula to compute section flow from gauge value, e.g '(x + 10) * 2' where x is gauge value"
  formula: String
}

input GaugeBindingInput {
  "Below this level the river is not enjoyable to paddle"
  minimum: Float
  "The river is still runnable above this level, but difficulty is considerably higher than mentioned here"
  maximum: Float
  "The best level for paddlers who consider themselves to be in the same class as the section"
  optimum: Float
  "It is insanely dangerous or physically impossible to run river this high"
  impossible: Float
  "If true, then the gauge gives very vague idea of actual section flows (e.g. the gauge is on other tributary)"
  approximate: Boolean
  "Optional formula to compute section flow from gauge value, e.g '(x + 10) * 2' where x is gauge value"
  formula: String
}

type Section implements NamedNode & Timestamped {
  "Unique section ID"
  id: ID!
  "Human-friendly section name (without river name, e.g. just 'Upper')"
  name: String!
  "Alternative names, e.g. english transliteration for names that contain umlauts"
  altNames: [String!]!
  """
  Guidebook page in markdown. Subject to premium access limitations
  Returns null if requires premium access
  Returns empty string if no description provided
  """
  description: String
  "Human-friendly description to complement numeric months list"
  season: String
  "Array of numers between 0 and 23, corresponding to half-months"
  seasonNumeric: [Int!]!

  "Section region"
  region: Region!
  "Section river"
  river: River!

  "Section gauge"
  gauge: Gauge
  "Level gauge bindings"
  levels: GaugeBinding
  "Flow gauge bindings"
  flows: GaugeBinding
  "Human-friendly description to complement gauge bindings, e.g. 'After heavy rainfall'"
  flowsText: String

  "Put-in location"
  putIn: Point!
  "Take-out location"
  takeOut: Point!
  "Array of [lon, lat, alt] points to roughly match river shape, ordered (inclusively) from put-in to take-out"
  shape: [Coordinates!]!
  "Approximate section length, in km"
  distance: Float
  "Approximate difference between put-in and take-out altitudes, in m"
  drop: Float
  "Dictionay value, approximate time required to run this section"
  duration: Int
  "Floating point difficulty value, i.e. 4.5 means IV+"
  difficulty: Float!
  "Short extra difficulty to be written in brackets, i.e. what's inside brackets for 'IV (2xV, X)' difficuly"
  difficultyXtra: String
  "Subjective rating from 0 to 5 stars, half stars allowed"
  rating: Float
  "Array of tags"
  tags: [Tag!]!
  "When was this section added to whitewater.guide"
  createdAt: DateTime!
  "When was this section last modified"
  updatedAt: DateTime!
  "Original author, can be null when user was deleted or for very old sections"
  createdBy: User
  "Photos, videos and blogs"
  media(page: Page): SectionMediaConnection!
  "Points of interest"
  pois: [Point!]!
  "IANA timezone name, one of listed here https://github.com/evansiroky/timezone-boundary-builder"
  timezone: String

  "Section is not ready for publication yet"
  hidden: Boolean!
  "Is demo section in premium region"
  demo: Boolean
  "What should be changed about this section?"
  helpNeeded: String
  "true if this section has been reviewed by our moderators"
  verified: Boolean
  "Indicates that current user has marked this section as favorite"
  favorite: Boolean

  """
  Chat room id (with domain and exclamation mark)
  This resolver will lazily create room if it doesn't exist. So it's not recommended to call it in list queries
  """
  roomId: String

  "Licensing information"
  license: License
  "copyright"
  copyright: String
}

type SectionMediaConnection {
  nodes: [Media!]!
  count: Int!
}

input SectionInput {
  "UUID of existing section or null to create new section"
  id: ID
  "Human-friendly section name (without river name, e.g. just 'Upper')"
  name: String!
  "Alternative names, e.g. english transliteration for names that contain umlauts"
  altNames: [String!]
  "Guidebook page in markdown. Subject to premium access limitations"
  description: String
  "Human-friendly description to complement numeric months list"
  season: String
  "Array of numers between 0 and 23, corresponding to half-months"
  seasonNumeric: [Int!]!

  "Section river"
  river: RefInput!
  "Section gauge"
  gauge: RefInput
  "Section region. Optional, but required when creating new river"
  region: RefInput
  "Level gauge bindings"
  levels: GaugeBindingInput
  "Flow gauge bindings"
  flows: GaugeBindingInput
  "Human-friendly description to complement gauge bindings, e.g. 'After heavy rainfall'"
  flowsText: String

  "Array of [lon, lat, alt] points to roughly match river shape, ordered (inclusively) from put-in to take-out"
  shape: [Coordinates!]!
  "Approximate section length, in km"
  distance: Float
  "Approximate difference between put-in and take-out altitudes, in m"
  drop: Float
  "Dictionay value, approximate time required to run this section"
  duration: Int
  "Floating point difficulty value, i.e. 4.5 means IV+"
  difficulty: Float!
  "Short extra difficulty to be written in brackets, i.e. what's inside brackets for 'IV (2xV, X)' difficuly"
  difficultyXtra: String
  "Subjective rating from 0 to 5 stars, half stars allowed"
  rating: Float
  "Array of tags"
  tags: [RefInput!]!
  "Points of interest"
  pois: [PointInput!]!
  "Photos, videos and blogs"
  media: [MediaInput!]!
  "IANA timezone name, one of listed here https://github.com/evansiroky/timezone-boundary-builder"
  timezone: String

  "Section is not ready for publication yet"
  hidden: Boolean!
  "What should be changed about this section?"
  helpNeeded: String
  "Author's user ID, defaults to current user"
  createdBy: ID
  "Optional field for imported data"
  importId: String

  "Licensing information"
  license: LicenseInput
  "Copyright"
  copyright: String
}

input SectionAdminSettings {
  "Whether this section is an exception in premium reegion"
  demo: Boolean!
}

type SectionsList {
  nodes: [Section!]!
  count: Int!
}

input SectionsFilter {
  "River ID"
  riverId: ID
  "Region ID"
  regionId: ID
  """
  Only list sections that weere update after this date

  @deprecated Use special query argument instead
  """
  updatedAfter: DateTime @deprecated
  "String to search in full section name (river name + section name)"
  search: String
  "list only verified or unverified sections"
  verified: Boolean
  "list only the sections that current user can edit"
  editable: Boolean
}

"""
Represents information on who, how and when modified the secttion.
For administrators only.
"""
type SectionEditLogEntry {
  "Log entry UUID"
  id: ID!
  "Section"
  section: Section!
  "User who edited or created the section"
  editor: User!
  "Create, update, media_create, etc."
  action: String!
  "JSON diff of change"
  diff: JSON
  "Date of action"
  createdAt: DateTime!
}

input SectionsEditLogFilter {
  regionId: ID
  editorId: ID
}

type SectionsEditLogList {
  nodes: [SectionEditLogEntry!]!
  count: Int!
}

type Query {
  "List sections"
  sections(
    filter: SectionsFilter
    page: Page
    updatedAfter: DateTime
  ): SectionsList!
  "Gets section by id. Returns null when id is not provided"
  section(id: ID): Section
  "Returns edit logs"
  sectionsEditLog(
    filter: SectionsEditLogFilter
    page: Page
  ): SectionsEditLogList! @admin
  "Lists favorite sections of current user, optionally filtering by region"
  favoriteSections(regionId: ID): SectionsList!
}

type BulkInsertResult {
  count: Int!
  log: String!
}

type Mutation {
  "Creates or updates section"
  upsertSection(section: SectionInput!): Section
  "Deletes section"
  removeSection(id: ID!): ID
  "Changes admin-only properties of a section"
  administrateSection(id: ID!, settings: SectionAdminSettings!): Section @admin
  """
  Merges source section into destination section.
  Source section will be deleted, its logbooks, media and POIs will be reattached to destination section instead
  """
  mergeSections(sourceId: ID!, destinationId: ID!): Boolean
  """
  This mutation will fetch tar.gz archive and insert sections in it
  Each JSON file in archive must be array of Partial<SectionInput> objects
  TODO: also upload photos from archive
  """
  bulkInsert(
    regionId: ID!
    hidden: Boolean
    archiveURL: String!
  ): BulkInsertResult @admin
  "Toggle favorite status of section, returns section with new status"
  toggleFavoriteSection(id: ID!, favorite: Boolean!): Section!
}
