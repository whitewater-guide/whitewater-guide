version: '3.6'

services:

  # Node.js backend
  backend:
    image: 'ww-backend:${BACKEND_TAG}'
    read_only: true
    build:
      dockerfile: Dockerfile.staging
    volumes:
      - type: bind
        source: /var/pm2
        target: /root/.pm2

  # Postgres sql database
  db:
    image: 'ww-db:${DB_TAG}'
    volumes:
      - type: bind
        source: /var/postgres/data/pgdata
        target: /var/lib/postgresql/data/pgdata
      - type: bind
        source: /tmp/postgres
        target: /tmp
      - type: tmpfs
        target: /run/postgresql

  # Minio to store images
  minio:
    volumes:
      - type: bind
        source: /var/minio/data
        target: /data
      - type: bind
        source: /var/minio/config
        target: /root/.minio
      - type: bind
        source: /tmp/minio
        target: /tmp

  # Caddy reverse proxy
  caddy:
    image: 'ww-caddy:${CADDY_TAG}'
    volumes:
      - type: bind
        source: /etc/caddycerts
        target: /etc/caddycerts
      - type: bind
        source: /tmp/caddy
        target: /tmp/caddy-cache
    ports:
      - '80:80'
      - '443:443'

  # imageproxy to generate thumbnails
  imageproxy:

  # Redis for sessions and last measurements
  redis:
    command: ['--appendonly', 'yes', '--aof-use-rdb-preamble', 'yes']
    volumes:
      - type: bind
        source: /tmp/redis
        target: /data

  # Workers to harvest some data
  workers:
    image: 'ww-workers:${WORKERS_TAG}'
    volumes:
      - type: bind
        source: /tmp/workers
        target: /tmp

  # Serve static landing
  landing:
    image: 'ww-landing:${LANDING_TAG}'

  # Serve static web client
  web:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ""
    build:
      context: ../packages/web
      labels:
        guide.whitewater: ""
    image: 'ww-web:${WEB_TAG}'
    read_only: true
#networks:
#  default:
#    driver: overlay
#    attachable: true