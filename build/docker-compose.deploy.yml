##################################################################################
# This is base file for all docker-machine deploys (local, staging, production)  #
##################################################################################
version: '3.6'

services:

  # Node.js backend
  backend:
    image: '${DOCKER_REGISTRY_PREFIX}backend:${DOCKER_ENVIRONMENT}'
    read_only: true
    build:
      dockerfile: Dockerfile.production
    volumes:
      - type: bind
        source: /var/pm2
        target: /root/.pm2

  # Postgres sql database
  db:
    image: '${DOCKER_REGISTRY_PREFIX}db:${DOCKER_ENVIRONMENT}'
    # command:
    #  - -carchive_command='wget wale/wal-push/%f -O -'
    #  - -cwal_level=archive
    #  - -carchive_mode=on
    volumes:
      - type: bind
        source: /var/postgres/data/pgdata
        target: /var/lib/postgresql/data/pgdata
      - type: bind
        source: /var/postgres/data/pg_wal
        target: /var/lib/postgresql/data/pg_wal
      - type: bind
        source: /tmp/postgres
        target: /tmp
      - type: tmpfs
        target: /run/postgresql

  # Minio to store images
  minio:
    volumes:
      - type: bind
        source: /var/minio/data
        target: /data
      - type: bind
        source: /var/minio/config
        target: /root/.minio
      - type: bind
        source: /tmp/minio
        target: /tmp

  # Caddy reverse proxy
  caddy:
    image: '${DOCKER_REGISTRY_PREFIX}caddy:${DOCKER_ENVIRONMENT}'
    volumes:
      - type: bind
        source: /etc/caddycerts
        target: /etc/caddycerts
      - type: bind
        source: /tmp/caddy
        target: /tmp/caddy-cache

  # imageproxy to generate thumbnails
  imageproxy:

  # Redis for sessions and last measurements
  redis:
    command: ['--appendonly', 'yes', '--aof-use-rdb-preamble', 'yes']
    volumes:
      - type: bind
        source: /tmp/redis
        target: /data

  # Workers to harvest some data
  workers:
    image: '${DOCKER_REGISTRY_PREFIX}workers:${DOCKER_ENVIRONMENT}'
    volumes:
      - type: bind
        source: /tmp/workers
        target: /tmp

  # Serve static landing
  landing:
    image: '${DOCKER_REGISTRY_PREFIX}landing:${DOCKER_ENVIRONMENT}'

  # Serve static web client
  web:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ""
    build:
      context: ../packages/web
      labels:
        guide.whitewater: ""
    image: '${DOCKER_REGISTRY_PREFIX}web:${DOCKER_ENVIRONMENT}'
    read_only: true

  # Adminer escape hatch
  adminer:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ""
    build:
      context: ../packages/adminer
      labels:
        guide.whitewater: ""
    volumes:
      - type: bind
        source: /tmp/adminer
        target: /tmp
    image: '${DOCKER_REGISTRY_PREFIX}adminer:${DOCKER_ENVIRONMENT}'
    read_only: true
    environment:
      - ADMINER_DEFAULT_SERVER=db

  # Simple postges backup
  pgdump:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ""
    image: 'doomsower/postgres-backup-s3:1'
    # read_only: true
    environment:
      SCHEDULE: '@daily'
      S3_PREFIX: '${DOCKER_ENVIRONMENT}'
      POSTGRES_HOST: db
      POSTGRES_DATABASE: wwguide
      POSTGRES_USER: postgres
    env_file:
      - ${DOCKER_ENV_FILE}
      - ../packages/pgdump/${DOCKER_ENV_FILE}
    depends_on:
      - db

  # WAL-e postgres backup
  # This is currently disabled, as I haven't figured out how to make it work
  # wale:
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]
  #   labels:
  #     guide.whitewater: ""
  #   build:
  #     context: ../packages/wale
  #     labels:
  #       guide.whitewater: ""
  #   env_file:
  #     - ../packages/wale/${DOCKER_ENV_FILE}
  #   volumes:
  #     - type: bind
  #       source: /var/postgres/data/pgdata
  #       target: /var/lib/postgresql/data/pgdata
  #     - type: bind
  #       source: /var/postgres/data/pg_wal
  #       target: /var/lib/postgresql/data/pg_wal
  #   image: '${DOCKER_REGISTRY_PREFIX}wale:${DOCKER_ENVIRONMENT}'
  #   read_only: true
  #   environment:
  #     - PGDATA=/var/lib/postgresql/data/pgdata
  #     - PGWAL=/var/lib/postgresql/data/pg_wal