overwrite: true
schema:
  - './packages/schema/schema/*.graphql'
documents:
  # Shared fragments, used both by frontend and by backend tests
  - ./packages/schema/fragments/*.gql
generates:
  # Common types shared by backend, web frontend and mobile are generated in schema package
  # Common validation schemas are also in schema package
  ./packages/schema/src/__generated__/types.ts:
    plugins:
      - typescript
      - add:
          content: '/* eslint-disable @typescript-eslint/no-explicit-any */'

  # Typedefs are used to make executable schema on backend
  ./packages/schema/src/__generated__/typeDefs.ts:
    plugins:
      - add:
          content: '/* eslint-disable @typescript-eslint/no-explicit-any */'
      - '@whitewater-guide/codegen-typedefs'

  ./packages/schema/src/__generated__/fragments.ts:
    preset: import-types
    presetConfig:
      typesPath: ./types
    documents:
      - ./packages/schema/fragments/*.gql
    plugins:
      - typescript-operations
      - typescript-document-nodes
      - add:
          content: '/* eslint-disable @typescript-eslint/no-explicit-any */'
    config:
      # Setting this suffix will allow inports using 'importAllFragmentsFrom'
      fragmentSuffix: 'FragmentDoc'

  ./packages/schema/src/__generated__/fragmentTypes.ts:
    plugins:
      - fragment-matcher

  ./packages/clients/src/apollo/helpers.generated.ts:
    plugins:
      - typescript-apollo-client-helpers

  # GRAPHQL resolvers
  ./packages/backend/src/apollo/resolvers.generated.ts:
    emitLegacyCommonJSImports: false
    preset: import-types
    presetConfig:
      typesPath: '@whitewater-guide/schema'
    plugins:
      - add:
          content:
            - '/* eslint-disable @typescript-eslint/no-explicit-any */'
      - typescript-resolvers
    config:
      gqlImport: graphql-tag#gql
      useTypeImports: true
      useIndexSignature: true
      noSchemaStitching: true
      contextType: ./context.js#Context
      resolverTypeWrapperSignature: 'T extends object ? Promise<Partial<T>> | Partial<T> : Promise<T> | T'
      defaultMapper: any
      mappers:
        Banner: '../db/index.js#Sql.Banners'
        BannerSource: '../db/index.js#Sql.BannerSource'
        Descent: '../db/index.js#Sql.Descents'
        Gauge: '../db/index.js#Sql.GaugesView'
        GaugeBinding: '../db/index.js#Sql.GaugeBinding'
        Group: '../db/index.js#Sql.GroupsView'
        License: '@whitewater-guide/schema#License'
        Media: '../db/index.js#Sql.MediaView'
        Point: '../db/index.js#Sql.PointsView'
        Region: '../db/index.js#Sql.RegionsView'
        RegionCoverImage: '../db/index.js#Sql.RegionCoverImage'
        River: '../db/index.js#Sql.RiversView'
        Section: '../db/index.js#Sql.SectionsView'
        Source: '../db/index.js#Sql.SourcesView'
        Suggestion: '../db/index.js#Sql.Suggestions'
        User: '../db/index.js#Sql.Users'

  # Tests that run GRAPHQL queries and mutations against our API
  ./packages/backend/src/:
    emitLegacyCommonJSImports: false
    documents:
      - ./packages/backend/src/**/__tests__/*.ts
      - ./packages/backend/src/**/*.test.ts
    preset: near-operation-file
    presetConfig:
      extension: .generated.ts
      baseTypesPath: '~@whitewater-guide/schema'
      importAllFragmentsFrom: '~@whitewater-guide/schema'
    plugins:
      - typescript-operations
      # This custom-made plugin generates strongly typed functions to execute graphql queries in tests
      - '@whitewater-guide/codegen-backend-tests'
    config:
      useTypeImports: true
      gqlImport: graphql-tag#gql

  # Frontend queries and mutations
  ./:
    documents:
      - ./packages/clients/src/**/*.gql
      - ./packages/promo/src/**/*.gql
      - ./packages/web/src/**/*.gql
    preset: near-operation-file
    presetConfig:
      extension: .generated.ts
      baseTypesPath: '~@whitewater-guide/schema'
      importAllFragmentsFrom: '~@whitewater-guide/schema'
    plugins:
      - add:
          content: '/* eslint-disable @typescript-eslint/no-explicit-any */'
      - typescript-operations
      - typescript-react-apollo

  ./packages/mobile/src/:
    schema: ./packages/mobile/schema/mobile-local-schema.graphql
    documents:
      - ./packages/mobile/src/**/*.gql
    preset: near-operation-file
    presetConfig:
      extension: .generated.ts
      baseTypesPath: '~@whitewater-guide/schema'
      importAllFragmentsFrom: '~@whitewater-guide/schema'
    plugins:
      - add:
          content: '/* eslint-disable @typescript-eslint/no-explicit-any */'
      - typescript-operations
      - typescript-react-apollo

config:
  # Due to serialization/deserialization scalars have different type on backend and frontend
  # I.e. it's 'Date' on backend and 'string' on frontend
  # As a workaround, `clients` and `backend` packages define global types in `codegen-scalars.ts` files
  # `schema` packages uses global types from `codegen-scalars.d.ts` file
  scalars:
    Date: CodegenDate
    DateTime: CodegenDateTime
    JSON: '{ [key: string]: any }'
    Cursor: CodegenCursor
    Coordinates: CodegenCoordinates

hooks:
  afterAllFileWrite:
    - prettier --write
  beforeDone:
    # Codegen can execute only one hook from list
    # https://github.com/dotansimha/graphql-code-generator/issues/6091
    - ./scripts/codegen_workarounds.sh
