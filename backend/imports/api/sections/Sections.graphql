type GaugeBinding {
  minimum: Float,
  maximum: Float,
  optimum: Float,
  impossible: Float,
  approximate: Float,
  lastTimestamp: Date,
  lastValue: Float,
}

input GaugeBindingInput {
  minimum: Float,
  maximum: Float,
  optimum: Float,
  impossible: Float,
  approximate: Float,
}

type Section {
  _id: ID!,
  name: String!,
  description: String,
  season: String,
  seasonNumeric: [Int],

  region: Region,
  river: River,

  gauge: Gauge,
  levels: GaugeBinding,
  flows: GaugeBinding,

  putIn: Point!,
  takeOut: Point!,
  shape: [[Float!]]!,
  distance: Float,
  drop: Float,
  duration: Int,
  difficulty: Float!,
  difficultyXtra: String,
  rating: Float,
  #Supply tags
  supplyTags: [Tag],
  #Kayaking description tags
  kayakingTags: [Tag],
  #Hazards tags
  hazardsTags: [Tag],
  #Misc tags
  miscTags: [Tag],
  createdAt: Date,
  #This is user id, but for now it is string
  createdBy: String,
  updatedAt: Date,
  media: [Media],
  pois: [Point],
}

input SectionRiverInput {
  _id: ID!,
  name: String,
  regionId: ID
}

input SectionGaugeInput {
  _id: ID!,
  name: String,
}

input SectionInput {
  _id: ID,
  name: String!,
  description: String,
  season: String,
  seasonNumeric: [Int],

  regionId: ID,
  river: SectionRiverInput,
  gauge: SectionGaugeInput,
  levels: GaugeBindingInput,
  flows: GaugeBindingInput,

  shape: [[Float!]]!,
  distance: Float,
  drop: Float,
  duration: Int,
  difficulty: Float!,
  difficultyXtra: String,
  rating: Float,
  supply: [String],
  kayaking: [String],
  hazards: [String],
  tags: [String],
  media: [MediaInput],
  pois: [PointInput],

  supplyTags: [RefInput]
  kayakingTags: [RefInput]
  hazardsTags: [RefInput]
  miscTags: [RefInput]
}

input SectionSearchTerms {
  sortBy: String,
  sortDirection: SortDirection,
  riverId: ID,
  regionId: ID,
  searchString: String,
  difficulty: [Float],
  duration: [Int],
  rating: Float,
}

type SectionsSearchResult {
  sections: [Section]!,
  count: Int,
}

type Query {
  sections(terms:SectionSearchTerms!, skip: Int, limit: Int, language: String):SectionsSearchResult!
  section(_id:ID, language: String):Section
}

type Mutation {
  upsertSection(section:SectionInput!, language:String):Section,
  removeSection(_id:ID!):Boolean,
}

type Subscription {
  measurementsUpdated(regionId: ID!, sectionId: ID): [Section]!
}