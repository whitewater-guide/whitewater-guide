enum HarvestMode {
  allAtOnce,
  oneByOne,
}

type Source {
  id: ID!
  name: String!
  language: String!
  termsOfUse: String
  script: String!
  cron: String
  harvestMode: HarvestMode!
  url: String
  enabled: Boolean
  regions: SourceRegionConnection!
  # gauges: [Gauge]!
  createdAt: Date
  updatedAt: Date
}

type SourceRegionConnection {
  nodes: [Region]!
  count: Int
}

input SourceInput {
  id: ID
  name: String!
  termsOfUse: String
  script: String!
  cron: String
  harvestMode: HarvestMode!
  regions: [RefInput]
  url: String
  enabled: Boolean
}

type Query {
  sources(language:String): [Source]!
  source(id: ID, language: String): Source
}

type Mutation {
  upsertSource(source:SourceInput!, language: String):Source
  removeSource(id:ID!):ID
  # autofillSource(id:ID!):Boolean
  # generateSourceSchedule(id:ID!):Boolean
  # setSourceEnabled(id:ID!, enabled:Boolean!): Source
}