type GaugeBinding {
  minimum: Float
  maximum: Float
  optimum: Float
  impossible: Float
  approximate: Boolean
}

input GaugeBindingInput {
  minimum: Float
  maximum: Float
  optimum: Float
  impossible: Float
  approximate: Boolean
}

type Section {
  id: ID!
  language: String!
  name: String!
  description: String
  season: String
  seasonNumeric: [Int]!

  region: Region
  river: River

  gauge: Gauge
  levels: GaugeBinding
  flows: GaugeBinding
  flowsText: String

  putIn: Point!
  takeOut: Point!
  shape: [[Float!]]!
  distance: Float
  drop: Float
  duration: Int
  difficulty: Float!
  difficultyXtra: String
  rating: Float
  tags: [Tag]!
  createdAt: Date
  updatedAt: Date
  # media: [Media]
  pois: [Point]!
}

input SectionRiverInput {
  id: ID!
  name: String
  region: RefInput!
}

input SectionInput {
  id: ID
  name: String!
  description: String
  season: String
  seasonNumeric: [Int]

  river: SectionRiverInput
  gauge: RefInput
  levels: GaugeBindingInput
  flows: GaugeBindingInput
  flowsText: String

  shape: [[Float!]]!
  distance: Float
  drop: Float
  duration: Int
  difficulty: Float!
  difficultyXtra: String
  rating: Float
  tags: [RefInput]!
#  media: [MediaInput]
  pois: [PointInput]
}

type SectionsList {
  nodes: [Section]!
  count: Int!
}

input SectionsFilter {
  riverId: ID
  regionId: ID
  updatedAt: Date
}

type Query {
  sections(language: String, page: Page, filter: SectionsFilter): SectionsList!
  section(id: ID, language: String): Section
}

type Mutation {
  upsertSection(section: SectionInput!, language: String): Section,
  removeSection(id: ID!): Boolean,
}
