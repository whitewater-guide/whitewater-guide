type GaugeBinding {
  # Below this level the river is not enjoyable to paddle
  minimum: Float
  # The river is still runnable above this level, but difficulty is considerably higher than mentioned here
  maximum: Float
  # The best level for paddlers who consider themselves to be in the same class as the section
  optimum: Float
  # It is insanely dangerous or physically impossible to run river this high
  impossible: Float
  # If true, then the gauge gives very vague idea of actual section flows (e.g. the gauge is on other tributary)
  approximate: Boolean
  # Optional formula to compute section flow from gauge value, e.g '(x + 10) * 2' where x is gauge value
  formula: String
}

input GaugeBindingInput {
  minimum: Float
  maximum: Float
  optimum: Float
  impossible: Float
  approximate: Boolean
  formula: String
}

type Section {
  # Unique section ID
  id: ID!
  # Human-friendly section name (without river name, e.g. just 'Upper')
  name: String!
  # Alternative names, e.g. english transliteration for names that contain umlauts
  altNames: [String!]
  # Guidebook page. Subject to premium access limitations
  # Returns null if requires premium access
  # Returns empty string if no description provided
  description: String
  # Human-friendly description to complement numeric months list
  season: String
  # Array of numers between 0 and 23, corresponding to half-months
  seasonNumeric: [Int]!

  # Section region
  region: Region
  # Section river
  river: River

  # Section gauge
  gauge: Gauge
  # Level bindings bindings
  levels: GaugeBinding
  # Flow gauge bindings
  flows: GaugeBinding
  # Human-friendly description to complement gauge bindings, e.g. 'After heavy rainfall'
  flowsText: String

  # Put-in location
  putIn: Point!
  # Take-out location
  takeOut: Point!
  # Array of [lon, lat, alt] points to roughly match river shape, ordered (inclusively) from put-in to take-out
  shape: [[Float!]]!
  # Approximate section length, in km
  distance: Float
  # Approximate difference between put-in and take-out altitudes, in m
  drop: Float
  # Dictionay value, approximate time required to run this section
  duration: Int
  # Floating point difficulty value, i.e. 4.5 means IV+
  difficulty: Float!
  # Short extra difficulty to be written in brackets, i.e. what's inside brackets for "IV (2xV, X)" difficuly
  difficultyXtra: String
  # Subjective rating from 0 to 5 stars, half stars allowed
  rating: Float
  # Array of tags
  tags: [Tag]!
  # When was this section added to whitewater.guide
  createdAt: Date
  # When was this section last modified
  updatedAt: Date
  # Photos, videos and blogs
  media(page: Page): SectionMediaConnection!
  # Points of interest
  pois: [Point]!

  # Not ready for publication yet
  hidden: Boolean!
  # Is demo section in premium region
  demo: Boolean
}

type SectionMediaConnection {
  nodes: [Media]!
  count: Int!
}

input SectionInput {
  id: ID
  name: String!
  altNames: [String!]
  description: String
  season: String
  seasonNumeric: [Int]

  river: RefInput!
  gauge: RefInput
  # Optional, but required when creating new river
  region: RefInput
  levels: GaugeBindingInput
  flows: GaugeBindingInput
  flowsText: String

  shape: [[Float!]]!
  distance: Float
  drop: Float
  duration: Int
  difficulty: Float!
  difficultyXtra: String
  rating: Float
  tags: [RefInput]!
  pois: [PointInput]!

  hidden: Boolean!
}

input SectionAdminSettings {
  demo: Boolean!
}

type SectionsList {
  nodes: [Section]!
  count: Int!
}

input SectionsFilter {
  riverId: ID
  regionId: ID
  updatedAfter: Date
}

type SectionEditLogEntry {
  id: ID!
  section: Section!
  editor: User!
  action: String!
  diff: JSON
  createdAt: Date!
}

input SectionsEditLogFilter {
  regionId: ID
  editorId: ID
}

type SectionsEditLogList {
  nodes: [SectionEditLogEntry]!
  count: Int!
}

type Query {
  sections(page: Page, filter: SectionsFilter): SectionsList!
  section(id: ID): Section
  sectionsEditLog(
    filter: SectionsEditLogFilter
    page: Page
  ): SectionsEditLogList! @admin
}

type Mutation {
  upsertSection(section: SectionInput!): Section
  removeSection(id: ID!): ID
  administrateSection(id: ID!, settings: SectionAdminSettings!): Section @admin
}
