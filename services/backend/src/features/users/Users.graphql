type User {
  # Unique id
  id: ID!
  # Username
  name: String!
  # userpic, url for external, filename for internal
  avatar: String
  # email, not public
  email: String
  # is admin flag
  admin: Boolean!
  # is editor in any of regions
  editor: Boolean!
  # registration date
  createdAt: Date!
  # last profle update date
  updatedAt: Date!
  # Prerferred UI language
  language: String!
  # Prefer imperial measurement system
  imperial: Boolean!
  # Special settings for editors
  editorSettings: EditorSettings
  # If user is verified
  verified: Boolean!
  # Social media accounts
  accounts: [SocialMediaAccount]!

  # Which regions current user has purchased
  purchasedRegions: [Region]!
  # Which region groups current user has purchased
  purchasedGroups: [Group]!
}

type SocialMediaAccount {
  id: ID!
  provider: String!
}

type EditorSettings {
  # current editor UI language
  language: String
}

input UserInput {
  name: String
  avatar: String
  language: String
  imperial: Boolean
  email: String
}

input EditorSettingsInput {
  language: String
}

input UserFilterOptions {
  searchString: String
  editorsOnly: Boolean
}

type Query {
  me: User
  findUsers(filter: UserFilterOptions!): [User!] @admin
}

type Mutation {
  updateEditorSettings(editorSettings: EditorSettingsInput!): User
  updateProfile(user: UserInput!): User
  addFCMToken(token: String!): Boolean
  removeFCMToken(token: String!): Boolean
}
