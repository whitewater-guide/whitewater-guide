enum BannerPlacement {
  mobileSectionDescription
  mobileSectionRow
  mobileSectionMedia
  mobileRegionDescription
}

enum BannerKind {
  Image
  WebView
}

type BannerSource {
  kind: BannerKind!
  # Width / height for WebView, null for Image
  ratio: Float
  # URL for WebView, fielname for Image
  src: String!
}

type Banner {
  id: ID!
  # Unique one-word alias
  slug: String!
  # For admin convenience
  name: String!
  # Priority to choose banner, the higher the better
  priority: Int!

  enabled: Boolean!
  placement: BannerPlacement!
  source: BannerSource!
  # link for image banners, null for WebView banners
  link: String
  # Arbitrary data for extra schema flexibility
  extras: JSON
  # Client-side flag for lists, not persisted
  deleted: Boolean
  # Which regions
  regions: BannerRegionConnection
  # Which region groups
  groups: BannerGroupConnection
}

type BannerRegionConnection {
  nodes: [Region]!
  count: Int!
}

type BannerGroupConnection {
  nodes: [Group]!
  count: Int!
}

type BannersList {
  nodes: [Banner]!
  count: Int!
}

input BannerSourceInput {
  kind: BannerKind!
  ratio: Float
  src: String!
}

input BannerInput {
  id: ID
  # Unique alias, cannot be edited
  slug: String!
  # For admin convenience
  name: String!
  # Priority to choose banner, the higher the better
  priority: Int!
  enabled: Boolean!
  placement: BannerPlacement!
  source: BannerSourceInput!
  # link for image banners, null for WebView banners
  link: String
  # Arbitrary data for extra schema flexibility
  extras: JSON
  # Which regions
  regions: [RefInput]
  # Which region groups
  groups: [RefInput]
}

type Query {
  banner(id: ID): Banner @admin
  banners: BannersList @admin
  bannerFileUpload: UploadLink @admin
}

type Mutation {
  upsertBanner(banner: BannerInput!): Banner @admin
  removeBanner(id: ID!): Banner @admin
}
