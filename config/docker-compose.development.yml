version: '3.6'

services:
  # Node.js backend
  backend:
    container_name: ww-backend
    image: 'ww-backend:dev'
    build:
      dockerfile: Dockerfile.development
    env_file:
      - .env.development.local
      - ../services/backend/.env.development.local
    ports:
      - '5775:5775'
      - '3333:3333'
    volumes:
      - type: volume
        source: yarn
        target: /root/.cache/yarn
      - type: bind
        source: ../services/backend/dist
        target: /opt/app/dist
        volume:
          nocopy: true
      - type: bind
        source: ../services/backend/package.json
        target: /opt/app/package.json
      - type: bind
        source: ../services/backend/yarn.lock
        target: /opt/app/yarn.lock
      - type: bind
        source: ../services/backend/pm2.development.json
        target: /opt/app/pm2.development.json

  # Postgres sql database
  db:
    container_name: ww-db
    image: 'ww-db:dev'
    command:
      # These settings enable faster pg_restore
      - postgres
      - -carchive_mode=off
      - -cmax_wal_senders=0
      - -cwal_level=minimal
    volumes:
      - type: tmpfs
        target: /tmp
      - type: tmpfs
        target: /run/postgresql
        # Bind data dir locally, otherwise tmpfs runs out of space on pg_restore
      - ww-db-pgdata:/var/lib/postgresql/data
      - type: bind
        source: ../services/db/config/postgres-initdb.sh
        target: /docker-entrypoint-initdb.d/initdb.sh
      - type: bind
        source: ../services/db/config/gorge_schema.bak
        target: /docker-entrypoint-initdb.d/gorge_schema.bak
      - type: bind
        source: ../services/db/config/wwguide.bak
        target: /docker-entrypoint-initdb.d/wwguide.bak
      - type: bind
        source: ../services/db/config/measurements.csv
        target: /docker-entrypoint-initdb.d/measurements.csv
      - type: bind
        source: ../services/db/config/x-dev-restore.sh
        target: /docker-entrypoint-initdb.d/x-dev-restore.sh
    ports:
      - '5432:5432'

  # Minio to store images
  minio:
    container_name: ww-minio
    environment:
      - MINIO_HTTP_TRACE=/var/log/minio.log
    env_file:
      - .env.development.local
    ports:
      - '9001:9000'
    volumes:
      - type: bind
        source: ../dev-mount/minio/data
        target: /data
      - type: bind
        source: ../dev-mount/minio/config
        target: /root/.minio
      - type: bind
        source: ../dev-mount/minio/log/
        target: /var/log

  # Caddy reverse proxy
  caddy:
    container_name: ww-caddy
    image: 'ww-caddy:dev'
    env_file:
      - .env.development.local
      - ../services/caddy/.env.development.local
    tmpfs:
      - /tmp/caddy-cache
    volumes:
      - '../services/caddy/subdomains:/etc/subdomains'
      - '../services/caddy/caddy-common.conf:/etc/caddy-common.conf'
      - '../services/caddy/Caddyfile:/etc/Caddyfile'
    ports:
      - '6001:2015' # backend
      - '6002:2016' # minio
      - '6003:2017' # adminer
      - '6004:2018' # admin
      - '6005:2019' # root

  # Redis for sessions and last measurements
  redis:
    container_name: ww-redis
    ports:
      - '6379:6379'
    volumes:
      - type: tmpfs
        target: /data

  # Gorge to harvest some data
  gorge:
    container_name: ww-gorge
    env_file:
      - .env.development.local
      - ../services/gorge/.env.development.local
    command:
      [
        '--pg-db',
        'gorge',
        '--debug',
        '--log-format',
        'plain',
        '--db-chunk-size',
        '1000',
      ]
    ports:
      - '7080:7080'
    volumes:
      - type: bind
        source: ../dev-mount/gorge
        target: /tmp

  # cache for imageproxy thumbs
  imagecache:
    volumes:
      - type: volume
        source: imagecache-cache
        target: /var/cache
      - type: tmpfs
        target: /run
      - type: bind
        source: ../dev-mount/imagecache
        target: /var/proxy_cache
      - type: bind
        source: ../services/imagecache/nginx.conf
        target: /etc/nginx/nginx.conf

volumes:
  yarn:
    labels:
      guide.whitewater: ''
  ww-db-pgdata:
    labels:
      guide.whitewater: ''
  imagecache-cache:
    labels:
      guide.whitewater: ''
#  Docker-sync is temporary off
#  ww-sync:
#    external: true
