version: '3.6'

services:
  # Node.js backend
  backend:
    container_name: ww-backend
    image: 'ww-backend:dev'
    build:
      dockerfile: Dockerfile.development
    env_file:
      - .env.development.local
      - ../services/backend/.env.development.local
    ports:
      - '5775:5775'
      - '3333:3333'
    volumes:
      - type: volume
        source: yarn
        target: /root/.cache/yarn
      - type: bind
        source: ../services/backend/dist
        target: /opt/app/dist
        volume:
          nocopy: true
      - type: bind
        source: ../services/backend/package.json
        target: /opt/app/package.json
      - type: bind
        source: ../services/backend/yarn.lock
        target: /opt/app/yarn.lock
      - type: bind
        source: ../services/backend/pm2.development.json
        target: /opt/app/pm2.development.json
      # "Symlink" @whitewater-guide/commons into dir "lerna_modules" in NODE_PATH
      - type: bind
        source: ../packages/commons/package.json
        target: /opt/app/lerna_modules/@whitewater-guide/commons/package.json
        read_only: true
        volume:
          nocopy: true
      # "Symlink" @whitewater-guide/commons into dir "lerna_modules" in NODE_PATH
      - type: bind
        source: ../packages/commons/dist
        target: /opt/app/lerna_modules/@whitewater-guide/commons/dist
        read_only: true
        volume:
          nocopy: true

  # Postgres sql database
  db:
    container_name: ww-db
    image: 'ww-db:dev'
    command:
      # These settings enable faster pg_restore
      - postgres
      - -carchive_mode=off
      - -cmax_wal_senders=0
      - -cwal_level=minimal
    volumes:
      - type: tmpfs
        target: /tmp
      - type: tmpfs
        target: /run/postgresql
        # Bind data dir locally, otherwise tmpfs runs out of space on pg_restore
      - type: bind
        source: ../dev-mount/db/
        target: /var/lib/postgresql/data
      - type: bind
        source: ../services/db/config/dump.bak
        target: /docker-entrypoint-initdb.d/dump.bak
      - type: bind
        source: ../services/db/config/x-dev-restore.sh
        target: /docker-entrypoint-initdb.d/x-dev-restore.sh
    environment:
      - NODE_ENV=development # This is needed to created test db
    ports:
      - '5432:5432'

  # Minio to store images
  minio:
    container_name: ww-minio
    env_file:
      - .env.development.local
    ports:
      - '9001:9000'
    volumes:
      - type: bind
        source: ../dev-mount/minio/data
        target: /data
      - type: bind
        source: ../dev-mount/minio/config
        target: /root/.minio

  # Caddy reverse proxy
  caddy:
    container_name: ww-caddy
    image: 'ww-caddy:dev'
    env_file:
      - .env.development.local
      - ../services/caddy/.env.development.local
    tmpfs:
      - /tmp/caddy-cache
    volumes:
      - '../services/caddy/Caddyfile:/etc/Caddyfile'
    ports:
      - '6001:2015'

  # imageproxy to generate thumbnails
  imageproxy:
    container_name: ww-imageproxy
    command:
      - -verbose
      - -addr
      - 0.0.0.0:8080
      - -whitelist
      - minio:9000
      - -baseURL
      - http://minio:9000/
    ports:
      - '8082:8080'

  # Redis for sessions and last measurements
  redis:
    container_name: ww-redis
    ports:
      - '6379:6379'
    volumes:
      - type: tmpfs
        target: /data

  # Workers to harvest some data
  workers:
    container_name: ww-workers
    image: 'ww-workers:dev'
    env_file:
      - .env.development.local
      - ../services/workers/.env.development.local
    ports:
      - '7080:7080'
    volumes:
      - type: bind
        source: ../dev-mount/workers
        target: /tmp
volumes:
  yarn:
    labels:
      guide.whitewater: ''
#  Docker-sync is temporary off
#  ww-sync:
#    external: true
