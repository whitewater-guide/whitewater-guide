##################################################################################
# This is base file for all docker-machine deploys (local, staging, production)  #
##################################################################################
version: '3.6'

services:
  # Node.js backend
  backend:
    image: '${DOCKER_REGISTRY_PREFIX}backend:${BACKEND_VERSION}'
    read_only: true
    build:
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: /var/pm2
        target: /root/.pm2

  # Postgres sql database
  db:
    image: '${DOCKER_REGISTRY_PREFIX}db:${DB_VERSION}'
    volumes:
      - type: bind
        source: /var/postgres/10.9/data
        target: /var/lib/postgresql/data
      - type: bind
        source: /tmp/postgres
        target: /tmp
      - type: tmpfs
        target: /run/postgresql

  # Minio to store images
  minio:
    volumes:
      - type: bind
        source: /var/minio/data
        target: /data
      - type: bind
        source: /var/minio/config
        target: /root/.minio
      - type: bind
        source: /tmp/minio
        target: /tmp

  # Caddy reverse proxy
  caddy:
    image: '${DOCKER_REGISTRY_PREFIX}caddy:${CADDY_VERSION}'
    volumes:
      - type: bind
        source: /etc/caddycerts
        target: /etc/caddycerts
      - type: bind
        source: /var/caddy/cache
        target: /var/caddy/cache

  # cache for imageproxy thumbs
  imagecache:
    image: '${DOCKER_REGISTRY_PREFIX}imagecache:${IMAGECACHE_VERSION}'
    volumes:
      - type: bind
        source: /var/imagecache/cache
        target: /var/cache
      - type: tmpfs
        target: /run
      - type: bind
        source: /var/imagecache/proxy_cache
        target: /var/proxy_cache

  # Redis for sessions and last measurements
  redis:
    command: ['--appendonly', 'yes', '--aof-use-rdb-preamble', 'yes']
    volumes:
      - type: bind
        source: /var/redis
        target: /data

  # Workers to harvest some data
  workers:
    image: '${DOCKER_REGISTRY_PREFIX}workers:${WORKERS_VERSION}'
    volumes:
      - type: bind
        source: /tmp/workers
        target: /tmp

  # Serve static landing
  landing:
    image: '${DOCKER_REGISTRY_PREFIX}landing:${LANDING_VERSION}'

  # Serve static web client
  web:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ''
    build:
      context: ../services/web
      labels:
        guide.whitewater: ''
    image: '${DOCKER_REGISTRY_PREFIX}web:${WEB_VERSION}'
    env_file:
      - ../services/web/${DOCKER_ENV_FILE}

  # Serve static boompromo client
  boompromo:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ''
    build:
      context: ../services/boompromo
      labels:
        guide.whitewater: ''
    image: '${DOCKER_REGISTRY_PREFIX}boompromo:${BOOMPROMO_VERSION}'
    env_file:
      - ../services/boompromo/${DOCKER_ENV_FILE}

  # Adminer escape hatch
  adminer:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ''
    build:
      context: ../services/adminer
      labels:
        guide.whitewater: ''
    volumes:
      - type: tmpfs
        target: /tmp
    image: '${DOCKER_REGISTRY_PREFIX}adminer:${ADMINER_VERSION}'
    read_only: true

  # Simple postges backup
  pgdump:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ''
    image: 'doomsower/postgres-backup-s3:3'
    # read_only: true
    environment:
      SCHEDULE: '@daily'
      S3_PREFIX: '${DOCKER_ENVIRONMENT}'
      POSTGRES_HOST: db
      POSTGRES_DATABASE: wwguide
      POSTGRES_USER: postgres
    env_file:
      - ${DOCKER_ENV_FILE}
      - ../services/pgdump/${DOCKER_ENV_FILE}
    depends_on:
      - db

  # Backup images from minio to s3
  imagedump:
    deploy:
      placement:
        constraints: [node.role == manager]
    labels:
      guide.whitewater: ''
    build:
      context: ../services/imagedump
      labels:
        guide.whitewater: ''
    image: '${DOCKER_REGISTRY_PREFIX}imagedump:${IMAGEDUMP_VERSION}'
    # read_only: true
    env_file:
      - ${DOCKER_ENV_FILE}
      - ../services/imagedump/${DOCKER_ENV_FILE}
    depends_on:
      - minio
