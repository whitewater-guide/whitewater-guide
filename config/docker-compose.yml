version: '3.6'

x-single-host: &ww-single-host
  deploy:
    placement:
      constraints: [node.role == manager]
  labels:
    guide.whitewater: ''

services:
  # Node.js backend
  backend:
    <<: *ww-single-host
    env_file:
      - ${DOCKER_ENV_FILE}
      - ../services/backend/${DOCKER_ENV_FILE}
    build:
      context: ../services/backend
      labels:
        guide.whitewater: ''
    depends_on:
      - db
      - redis
      - minio
      - workers
    secrets:
      - google_service_account

  # Postgres sql database
  db:
    <<: *ww-single-host
    env_file:
      - ${DOCKER_ENV_FILE}
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - TIMESCALEDB_TELEMETRY=off
    build:
      context: ../services/db
      labels:
        guide.whitewater: ''
    read_only: true

  # Minio to store images
  minio:
    <<: *ww-single-host
    image: 'minio/minio:RELEASE.2019-08-01T22-18-54Z'
    command: server /data
    env_file:
      - ${DOCKER_ENV_FILE}
    read_only: true

  # imageproxy to generate thumbnails
  imageproxy:
    <<: *ww-single-host
    image: 'darthsim/imgproxy:v2.2.6'
    command: sh -c 'AWS_ACCESS_KEY_ID=$$MINIO_ACCESS_KEY AWS_SECRET_ACCESS_KEY=$$MINIO_SECRET_KEY imgproxy'
    env_file:
      - ${DOCKER_ENV_FILE}
    environment:
      - IMGPROXY_USE_ETAG=true
      - IMGPROXY_GZIP_COMPRESSION=0 # why compress images?
      - IMGPROXY_IGNORE_SSL_VERIFICATION=true
      - IMGPROXY_USE_S3=true
      - IMGPROXY_S3_ENDPOINT=http://minio:9000
      - IMGPROXY_TTL=31536000 # 1 year
    read_only: true

  # cache for imageproxy thumbs
  imagecache:
    <<: *ww-single-host
    build:
      context: ../services/imagecache
      labels:
        guide.whitewater: ''
    read_only: true
    depends_on:
      - imageproxy

  # Workers to harvest some data
  workers:
    <<: *ww-single-host
    env_file:
      - ${DOCKER_ENV_FILE}
      - ../services/workers/${DOCKER_ENV_FILE}
    build:
      context: ../services/workers
      labels:
        guide.whitewater: ''
    read_only: true
    depends_on:
      - db
      - redis

  # Caddy reverse proxy
  caddy:
    <<: *ww-single-host
    env_file:
      - ${DOCKER_ENV_FILE}
      - ../services/caddy/${DOCKER_ENV_FILE}
    build:
      context: ../services/caddy
      labels:
        guide.whitewater: ''
    read_only: true

  # Redis for sessions and last measurements
  redis:
    <<: *ww-single-host
    env_file:
      - ${DOCKER_ENV_FILE}
    image: redis:4-alpine
    read_only: true

  # Serve static landing
  landing:
    <<: *ww-single-host
    build:
      context: ../services/landing
      labels:
        guide.whitewater: ''
    read_only: true

secrets:
  google_service_account:
    file: ../services/backend/google_service_account.json
