version: '3.8'

x-commons: &ww-commons
  labels:
    guide.whitewater: ''

services:
  # Postgres sql database
  db:
    <<: *ww-commons
    container_name: ww-db
    environment:
      - POSTGRES_PASSWORD=whitewater
      - PGDATA=/var/lib/postgresql/data/pgdata
    image: ghcr.io/whitewater-guide/postgres:1.1.0
    command:
      # These settings enable faster pg_restore
      - postgres
      - -carchive_mode=off
      - -cmax_wal_senders=0
      - -cwal_level=minimal
      # - -clog_statement=all
    volumes:
      - type: tmpfs
        target: /tmp
      - type: tmpfs
        target: /run/postgresql
      # Uncomment this if you want temporary db storage
      - type: tmpfs
        target: /var/lib/postgresql/data
      # Uncomment this if you want permanent db storage
      # - type: bind
      #   source: ./dev-mount/postgres/data
      #   target: /var/lib/postgresql/data
      - type: bind
        source: ./services/db/config
        target: /docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    networks:
      default:
        aliases:
          - db.local

  # Minio to store images
  minio:
    <<: *ww-commons
    container_name: ww-minio
    image: 'minio/minio:RELEASE.2021-10-10T16-53-30Z'
    command: server /data
    environment:
      - MINIO_ACCESS_KEY=__minio_access_key__
      - MINIO_SECRET_KEY=__minio_secret__
    ports:
      - '9000:9000'
    volumes:
      - type: bind
        source: ./dev-mount/minio/data
        target: /data
      - type: bind
        source: ./dev-mount/minio/config
        target: /root/.minio
      - type: bind
        source: ./dev-mount/minio/log/
        target: /var/log

  # imageproxy to generate thumbnails
  imageproxy:
    <<: *ww-commons
    container_name: ww-imageproxy
    image: 'darthsim/imgproxy:v2.17'
    environment:
      - AWS_ACCESS_KEY_ID=__minio_access_key__
      - AWS_SECRET_ACCESS_KEY=__minio_secret__
      - IMGPROXY_KEY=abc123
      - IMGPROXY_SALT=abc123
      - IMGPROXY_USE_ETAG=true
      - IMGPROXY_GZIP_COMPRESSION=0 # why compress images?
      - IMGPROXY_IGNORE_SSL_VERIFICATION=true
      - IMGPROXY_USE_S3=true
      - IMGPROXY_S3_ENDPOINT=http://minio:9000
      - IMGPROXY_TTL=31536000 # 1 year
    ports:
      - '7050:8080'
    networks:
      default:
        aliases:
          - imageproxy.local

  # Gorge to harvest some data
  gorge:
    <<: *ww-commons
    container_name: ww-gorge
    image: ghcr.io/whitewater-guide/gorge:3.0.2
    depends_on:
      - db
    command: [
        '--cache',
        'inmemory',

        '--pg-db',
        'gorge',

        '--db-chunk-size',
        '1000',

        '--log-format',
        'plain',

        '--log-level',
        'debug',
        # '--hooks-health-cron',
        # '*/2 * * * *',

        # '--hooks-health-threshold',
        # '1',

        # '--hooks-health-url',
        # 'http://host.docker.internal:3333/gorge/health',

        # '--hooks-health-headers',
        # 'x-api-key: $$GORGE_HEALTH_KEY', # this env is evaluated by gorge during runtime, not by docker!
      ]
    environment:
      # prefer env to cli flags because in AWS Fargate it's passed via env
      - POSTGRES_PASSWORD=whitewater
      - GORGE_HEALTH_KEY=__test_gorge_health_key__
    ports:
      - '7080:7080'
    networks:
      default:
        aliases:
          - gorge.local

  pgadmin:
    <<: *ww-commons
    container_name: ww-pgadmin
    build:
      context: ./services/pgadmin/
    ports:
      - '4000:80'

  synapse:
    <<: *ww-commons
    container_name: ww-synapse
    image: matrixdotorg/synapse:v1.50.1
    environment:
      - SYNAPSE_CONFIG_PATH=/config/homeserver.yaml
    volumes:
      - type: bind
        source: ./services/synapse/config
        target: /config
      - type: bind
        source: ./dev-mount/synapse/data
        target: /data
    ports:
      - '8008:8008'
    networks:
      default:
        aliases:
          - synapse.local

  vectorim:
    <<: *ww-commons
    container_name: ww-vectorim
    image: vectorim/element-web:v1.9.9
    volumes:
      - type: bind
        source: ./services/vectorim/config.json
        target: /app/config.json
    ports:
      - '8007:80'
